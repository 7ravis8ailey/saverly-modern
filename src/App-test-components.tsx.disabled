import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'
import { useState } from 'react'

function App() {
  const [errors, setErrors] = useState<string[]>([])
  const [successes, setSuccesses] = useState<string[]>([])

  const testComponent = async (name: string, testFn: () => Promise<any>) => {
    try {
      await testFn()
      setSuccesses(prev => [...prev, name])
    } catch (error: any) {
      setErrors(prev => [...prev, `${name}: ${error.message}`])
    }
  }

  const runTests = async () => {
    setErrors([])
    setSuccesses([])

    // Test 1: Query Client
    await testComponent('QueryClient', async () => {
      const { queryClient } = await import('./lib/query-client')
      if (!queryClient) throw new Error('QueryClient not initialized')
    })

    // Test 2: Supabase
    await testComponent('Supabase', async () => {
      const { supabase } = await import('./lib/supabase-api')
      if (!supabase) throw new Error('Supabase not initialized')
    })

    // Test 3: Auth Provider
    await testComponent('AuthProvider', async () => {
      const { AuthProvider } = await import('./components/auth/auth-provider')
      if (!AuthProvider) throw new Error('AuthProvider not found')
    })

    // Test 4: Landing Page
    await testComponent('LandingPage', async () => {
      const { LandingPage } = await import('./pages/landing')
      if (!LandingPage) throw new Error('LandingPage not found')
    })

    // Test 5: Error Boundary
    await testComponent('ErrorBoundary', async () => {
      const { ErrorBoundary } = await import('./components/error-boundary')
      if (!ErrorBoundary) throw new Error('ErrorBoundary not found')
    })

    // Test 6: Environment Variables
    await testComponent('Environment Variables', async () => {
      const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
      const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY
      const googleMapsKey = import.meta.env.VITE_GOOGLE_MAPS_API_KEY
      
      if (!supabaseUrl) throw new Error('VITE_SUPABASE_URL missing')
      if (!supabaseKey) throw new Error('VITE_SUPABASE_ANON_KEY missing')
      if (!googleMapsKey) throw new Error('VITE_GOOGLE_MAPS_API_KEY missing')
    })
  }

  return (
    <Router>
      <Routes>
        <Route path="/" element={
          <div className="min-h-screen bg-gray-50 p-8">
            <div className="max-w-4xl mx-auto">
              <h1 className="text-4xl font-bold text-green-600 mb-4">Saverly Component Tester</h1>
              
              <button 
                onClick={runTests}
                className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 mb-6"
              >
                Run Component Tests
              </button>

              {successes.length > 0 && (
                <div className="bg-green-50 rounded-lg p-6 mb-6">
                  <h2 className="text-xl font-semibold text-green-800 mb-4">✅ Working Components</h2>
                  <ul className="space-y-2">
                    {successes.map((success, i) => (
                      <li key={i} className="text-green-700">✓ {success}</li>
                    ))}
                  </ul>
                </div>
              )}

              {errors.length > 0 && (
                <div className="bg-red-50 rounded-lg p-6">
                  <h2 className="text-xl font-semibold text-red-800 mb-4">❌ Failed Components</h2>
                  <ul className="space-y-2">
                    {errors.map((error, i) => (
                      <li key={i} className="text-red-700 font-mono text-sm">{error}</li>
                    ))}
                  </ul>
                </div>
              )}

              <div className="mt-6 p-4 bg-yellow-50 rounded">
                <p className="text-sm">Click "Run Component Tests" to check which components are failing.</p>
              </div>
            </div>
          </div>
        } />
      </Routes>
    </Router>
  )
}

export default App