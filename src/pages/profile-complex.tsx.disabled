import { useState } from 'react'
import { useAuth } from '@/components/auth/auth-provider'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import { supabase } from '@/lib/supabase'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { ManageSubscription } from '@/components/payment/manage-subscription'
import GooglePlacesAutocomplete from '@/components/maps/google-places-autocomplete'
import { User, MapPin, Phone, Mail, Save, Loader2 } from 'lucide-react'
import { toast } from '@/hooks/use-toast'

const profileSchema = z.object({
  firstName: z.string().min(1, 'First name is required'),
  lastName: z.string().min(1, 'Last name is required'),
  phone: z.string().optional(),
  address: z.string().min(1, 'Address is required'),
  city: z.string().min(1, 'City is required'),
  state: z.string().min(1, 'State is required'),
  zipCode: z.string().min(5, 'Valid zip code required'),
})

type ProfileFormData = z.infer<typeof profileSchema>

export function ProfilePage() {
  const { user, updateUser } = useAuth()
  const [isLoading, setIsLoading] = useState(false)
  const [selectedLocation, setSelectedLocation] = useState<any>(null)

  const form = useForm<ProfileFormData>({
    resolver: zodResolver(profileSchema),
    defaultValues: {
      firstName: user?.profile?.firstName || '',
      lastName: user?.profile?.lastName || '',
      phone: user?.phone || '',
      address: user?.profile?.address || '',
      city: user?.profile?.city || '',
      state: user?.profile?.state || '',
      zipCode: user?.profile?.zipCode || ''
    }
  })

  if (!user) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-saverly-green"></div>
          <p className="mt-4 text-gray-600">Loading profile...</p>
        </div>
      </div>
    )
  }

  const handleLocationSelect = (place: any) => {
    setSelectedLocation(place)
    if (place?.address_components) {
      const getComponent = (types: string[]) => {
        return place.address_components.find((component: any) =>
          component.types.some((type: string) => types.includes(type))
        )
      }

      const streetNumber = getComponent(['street_number'])?.long_name || ''
      const streetName = getComponent(['route'])?.long_name || ''
      const city = getComponent(['locality', 'administrative_area_level_3'])?.long_name || ''
      const state = getComponent(['administrative_area_level_1'])?.short_name || ''
      const zipCode = getComponent(['postal_code'])?.long_name || ''

      form.setValue('address', `${streetNumber} ${streetName}`.trim())
      form.setValue('city', city)
      form.setValue('state', state)
      form.setValue('zipCode', zipCode)
    }
  }

  const onSubmit = async (data: ProfileFormData) => {
    setIsLoading(true)
    try {
      const fullName = `${data.firstName} ${data.lastName}`.trim()
      
      // Update user profile in database
      const { error } = await supabase
        .from('users')
        .update({
          full_name: fullName,
          phone: data.phone,
          address: data.address,
          city: data.city,
          state: data.state,
          zip_code: data.zipCode,
          latitude: selectedLocation?.geometry?.location?.lat(),
          longitude: selectedLocation?.geometry?.location?.lng(),
          updated_at: new Date().toISOString()
        })
        .eq('uid', user.uid)

      if (error) {
        console.error('Profile update error:', error)
        toast({
          title: "Error",
          description: "Failed to update profile. Please try again.",
          variant: "destructive"
        })
        return
      }

      // Update local user state  
      await updateUser({
        full_name: fullName,
        phone: data.phone,
        profile: {
          ...user.profile,
          firstName: data.firstName,
          lastName: data.lastName,
          fullName,
          address: data.address,
          city: data.city,
          state: data.state,
          zipCode: data.zipCode
        }
      })

      toast({
        title: "Success",
        description: "Your profile has been updated successfully.",
        variant: "default"
      })
    } catch (error) {
      console.error('Profile update error:', error)
      toast({
        title: "Error", 
        description: "Something went wrong. Please try again.",
        variant: "destructive"
      })
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 flex items-center">
            <User className="h-8 w-8 mr-3 text-saverly-green" />
            My Profile
          </h1>
          <p className="mt-2 text-gray-600">
            Manage your account information and preferences
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Profile Form */}
          <div className="lg:col-span-2">
            <Card>
              <CardHeader>
                <CardTitle>Personal Information</CardTitle>
                <CardDescription>
                  Update your personal details and address information
                </CardDescription>
              </CardHeader>
              <CardContent>
                <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                  {/* Name Fields */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        First Name *
                      </label>
                      <Input
                        {...form.register('firstName')}
                        placeholder="John"
                        error={form.formState.errors.firstName?.message}
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Last Name *
                      </label>
                      <Input
                        {...form.register('lastName')}
                        placeholder="Doe"
                        error={form.formState.errors.lastName?.message}
                      />
                    </div>
                  </div>

                  {/* Contact Info */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Phone Number
                    </label>
                    <Input
                      {...form.register('phone')}
                      placeholder="+1 (555) 123-4567"
                      type="tel"
                    />
                  </div>

                  <Separator />

                  {/* Address Section */}
                  <div className="space-y-4">
                    <h3 className="text-lg font-medium text-gray-900 flex items-center">
                      <MapPin className="h-5 w-5 mr-2 text-saverly-green" />
                      Address Information
                    </h3>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Search Address *
                      </label>
                      <GooglePlacesAutocomplete
                        onPlaceSelected={handleLocationSelect}
                        placeholder="Start typing your address..."
                        className="w-full"
                      />
                      <p className="text-xs text-gray-500 mt-1">
                        Please select an address from the suggestions for accurate location data
                      </p>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Street Address *
                      </label>
                      <Input
                        {...form.register('address')}
                        placeholder="123 Main Street"
                        error={form.formState.errors.address?.message}
                      />
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          City *
                        </label>
                        <Input
                          {...form.register('city')}
                          placeholder="New York"
                          error={form.formState.errors.city?.message}
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          State *
                        </label>
                        <Input
                          {...form.register('state')}
                          placeholder="NY"
                          error={form.formState.errors.state?.message}
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Zip Code *
                        </label>
                        <Input
                          {...form.register('zipCode')}
                          placeholder="10001"
                          error={form.formState.errors.zipCode?.message}
                        />
                      </div>
                    </div>
                  </div>

                  <div className="flex justify-end pt-6">
                    <Button
                      type="submit"
                      disabled={isLoading}
                      className="bg-saverly-green hover:bg-saverly-dark-green"
                    >
                      {isLoading ? (
                        <>
                          <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                          Saving...
                        </>
                      ) : (
                        <>
                          <Save className="w-4 h-4 mr-2" />
                          Save Changes
                        </>
                      )}
                    </Button>
                  </div>
                </form>
              </CardContent>
            </Card>
          </div>

          {/* Account Info Sidebar */}
          <div className="space-y-6">
            {/* Account Status */}
            <Card>
              <CardHeader>
                <CardTitle>Account Status</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">Email</span>
                  <span className="text-sm text-gray-600">{user.email}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">Account Type</span>
                  <Badge variant={user.subscriptionStatus === 'active' ? 'default' : 'secondary'}>
                    {user.subscriptionStatus === 'active' ? 'Premium' : 'Free'}
                  </Badge>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">Member Since</span>
                  <span className="text-sm text-gray-600">
                    {user.profile?.createdAt ? new Date(user.profile.createdAt).toLocaleDateString() : 'Recently'}
                  </span>
                </div>
              </CardContent>
            </Card>

            {/* Subscription Management */}
            <ManageSubscription />

            {/* Quick Actions */}
            <Card>
              <CardHeader>
                <CardTitle>Quick Actions</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <Button variant="outline" className="w-full justify-start">
                  <Mail className="h-4 w-4 mr-2" />
                  Change Email
                </Button>
                <Button variant="outline" className="w-full justify-start">
                  <User className="h-4 w-4 mr-2" />
                  Update Password
                </Button>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}